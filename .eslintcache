[{"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/Store.js":"1","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipmentDropDown.js":"2","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/App.js":"3","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerInfoCard.js":"4","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterInfoCard.js":"5","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel.js":"6","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/index.js":"7","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/reportWebVitals.js":"8","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DropDownList.js":"9","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/SingleSlot.js":"10","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipSlotCard.js":"11","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterSkillSlot.js":"12","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerSkillSlot.js":"13"},{"size":6318,"mtime":1607752992669,"results":"14","hashOfConfig":"15"},{"size":3748,"mtime":1607418477551,"results":"16","hashOfConfig":"15"},{"size":7781,"mtime":1608245212064,"results":"17","hashOfConfig":"15"},{"size":4479,"mtime":1607417305959,"results":"18","hashOfConfig":"15"},{"size":6179,"mtime":1607825585674,"results":"19","hashOfConfig":"15"},{"size":3721,"mtime":1607842206286,"results":"20","hashOfConfig":"15"},{"size":636,"mtime":1607755915930,"results":"21","hashOfConfig":"15"},{"size":362,"mtime":1606531617959,"results":"22","hashOfConfig":"15"},{"size":3290,"mtime":1607408796496,"results":"23","hashOfConfig":"15"},{"size":3473,"mtime":1607509323006,"results":"24","hashOfConfig":"15"},{"size":2520,"mtime":1607417366043,"results":"25","hashOfConfig":"15"},{"size":618,"mtime":1607751077394,"results":"26","hashOfConfig":"15"},{"size":778,"mtime":1607834112515,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"k2xskb",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/Store.js",["61"],"import { createStore } from 'redux'\r\n\r\nconst initialState = {\r\n  posts: [{id: 1, title: 'Test Post'}],\r\n  allWeapons: [{name: '',  slot:'weapon', id: ''}],\r\n  allHelms: [{name: '', id: ''}],\r\n  allNecks: [{name: '', id: ''}],\r\n  allCapes: [{name: '', id: ''}],\r\n  allAmmo: [{name: '', id: ''}],\r\n  allBodies: [{name: '', id: ''}],\r\n  allShields: [{name: '', id: ''}],\r\n  allLegs: [{name: '', id: ''}],\r\n  allHands: [{name: '', id: ''}],\r\n  allFeet: [{name: '', id: ''}],\r\n  allRings: [{name: '', id: ''}],\r\n  allBosses: [{name: '', id: ''}],\r\n  loginModal: {\r\n    open: false\r\n  },\r\n  /*             \"hitpoints\": 255, \"defence_level\": 300, \"magic_level\": 150,\r\n                 \"defence_stab\": 50,\"defence_slash\": 50,\"defence_crush\": 10, \r\n                 \"defence_magic\": 100, \"defence_ranged\": 100 */\r\n  selectedBoss: {\r\n    name:\"Select A Boss\", \r\n    cmblvl: '1', \r\n    id: '', \r\n    hitpoints: '-',         \r\n    defence_level: '-', \r\n    magic_level: '-', \r\n    defence_stab: '-',           \r\n    defence_slash: '-', \r\n    defence_crush: '-', \r\n    defence_magic: '-',              \r\n    defence_ranged: '-'\r\n  },\r\n  equippedBody: {name:\"\", icon:\"\"},\r\n  equippedHead: {name:\"\", icon:\"\"},\r\n  equippedCape: {name:\"\", icon:\"\"},\r\n  equippedNeck: {name:\"\", icon:\"\"},\r\n  equippedAmmo: {name:\"\", icon:\"\"},\r\n  equippedWeapon: {name:\"\", icon:\"\"},\r\n  equippedOffhand: {name:\"\", icon:\"\"},\r\n  equippedLegs: {name:\"\", icon:\"\"},\r\n  equippedHands: {name:\"\", icon:\"\"},\r\n  equippedFeet: {name:\"\", icon:\"\"},\r\n  equippedRing: {name:\"\", icon:\"\"},\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    const {type, payload} = action;\r\n    switch(type){\r\n      case 'SELECTED_BOSS': return{\r\n                              ...state,\r\n                              selectedBoss: payload\r\n                            }\r\n      case 'CHANGE_WEAPON': return{\r\n                              ...state,\r\n                              equippedWeapon: payload\r\n                            }\r\n      case 'CHANGE_CAPE': return{\r\n                              ...state,\r\n                              equippedCape: payload\r\n                            }      \r\n      case 'CHANGE_RING': return{\r\n                              ...state,\r\n                              equippedRing: payload\r\n                            }           \r\n      case 'CHANGE_HELM': return{\r\n                              ...state,\r\n                              equippedHead: payload\r\n                            }\r\n      case 'CHANGE_NECK': return{\r\n                              ...state,\r\n                              equippedNeck: payload\r\n                            }\r\n      case 'CHANGE_OFFHAND': return{\r\n                              ...state,\r\n                              equippedOffhand: payload\r\n                            }                          \r\n      case 'CHANGE_AMMO': return{\r\n                              ...state,\r\n                              equippedAmmo: payload\r\n                            }\r\n      case 'CHANGE_BODY': return{\r\n                              ...state,\r\n                              equippedBody: payload\r\n                            }\r\n      case 'CHANGE_LEGS': return{\r\n                              ...state,\r\n                              equippedLegs: payload\r\n                            }\r\n      case 'CHANGE_HAND': return{\r\n                              ...state,\r\n                              equippedHands: payload\r\n                            }\r\n      case 'CHANGE_FEET': return{\r\n                              ...state,\r\n                              equippedFeet: payload\r\n                            }                                                        \r\n                            \r\n\r\n      case 'ADD_WEAPON': return{\r\n                            ...state,\r\n                            allWeapons: state.allWeapons.concat(payload)\r\n                          }\r\n      case 'ADD_HEAD': return{\r\n                            ...state,\r\n                            allHelms: state.allHelms.concat(payload)\r\n                          }\r\n      case 'ADD_CAPE': return{\r\n                            ...state,\r\n                            allCapes: state.allCapes.concat(payload)\r\n                          }\r\n      case 'ADD_NECK': return{\r\n                            ...state,\r\n                            allNecks: state.allNecks.concat(payload)\r\n                          }\r\n      case 'ADD_AMMO': return{\r\n                            ...state,\r\n                            allAmmo: state.allAmmo.concat(payload)\r\n                          }\r\n      case 'ADD_BODY': return{\r\n                            ...state,\r\n                            allBodies: state.allBodies.concat(payload)\r\n                          }\r\n      case 'ADD_SHIELD': return{\r\n                            ...state,\r\n                            allShields: state.allShields.concat(payload)\r\n                          }\r\n      case 'ADD_LEGS': return{\r\n                            ...state,\r\n                            allLegs: state.allLegs.concat(payload)\r\n                          }\r\n      case 'ADD_HANDS': return{\r\n                            ...state,\r\n                            allHands: state.allHands.concat(payload)\r\n                          }  \r\n      case 'ADD_FEET': return{\r\n                            ...state,\r\n                            allFeet: state.allFeet.concat(payload)\r\n                          } \r\n      case 'ADD_RING': return{\r\n                            ...state,\r\n                            allRings: state.allRings.concat(payload)\r\n                          }\r\n      case 'ADD_NECK': return{\r\n                            ...state,\r\n                            allNecks: state.allNecks.concat(payload)\r\n                          }\r\n      case 'ADD_BOSS': return{\r\n                          ...state, \r\n                          allBosses: state.allBosses.concat(payload)\r\n      }\r\n      default: console.log('NO REDUCER MATCH:', payload);                                                                                                                                                         \r\n      \r\n    }\r\n    return state;\r\n}\r\n  \r\n\r\nconst store = createStore(\r\n    reducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nexport default store",["62","63"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipmentDropDown.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/App.js",["64"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerInfoCard.js",[],["65","66"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterInfoCard.js",["67"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport image from './../zulrah.png'\r\nimport MonsterSkillSlot from './MonsterSkillSlot'\r\nimport './../stylesheets/MonsterInfo.css'\r\n\r\nclass MonsterInfoCard extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            displayItems: [],\r\n            selected: ''\r\n        }\r\n        this.filterList = this.filterList.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        let pageNumber = 1;\r\n        let eMax_Pages = 57;\r\n        let a = new Date();\r\n        console.log('Beginning fetch....');\r\n        for(let i = pageNumber; i <= eMax_Pages; i++){\r\n        await fetch(`https://api.osrsbox.com/monsters?max_results=50&&page=${i}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                for (let j = 0; j < json._items.length; j++) {\r\n                    const {category, name, id} = json._items[j];\r\n                    if(category.includes('boss')){\r\n                        this.props.dispatch({\r\n                            type: 'ADD_BOSS',\r\n                            payload: {name: name.toLowerCase(), id: id}\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n    async handleChange(event){\r\n        let itemList = this.props.allBosses;\r\n        const itemID = itemList.find(item => item.name === event.target.innerText).id;\r\n        await this.setState({selected: event.target.innerText});\r\n        console.log('NEW ITEM SELECTED:', this.state.selected, itemID);\r\n        await fetch(`https://api.osrsbox.com/monsters/${itemID}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                const {\r\n                    name,\r\n                    hitpoints, \r\n                    combat_level, \r\n                    id,        \r\n                    defence_level, \r\n                    magic_level, \r\n                    defence_stab,           \r\n                    defence_slash, \r\n                    defence_crush, \r\n                    defence_magic,              \r\n                    defence_ranged\r\n                } = json;\r\n                this.props.dispatch({\r\n                    type: `SELECTED_BOSS`,\r\n                    payload: {                    \r\n                        name: name,\r\n                        hitpoints: hitpoints,  \r\n                        combat_level: combat_level, \r\n                        id: id,     \r\n                        defence_level: defence_level, \r\n                        magic_level: magic_level, \r\n                        defence_stab: defence_stab,           \r\n                        defence_slash: defence_slash, \r\n                        defence_crush: defence_crush, \r\n                        defence_magic: defence_magic,              \r\n                        defence_ranged: defence_ranged\r\n                    }\r\n                })\r\n            }\r\n        ) \r\n    }\r\n    async filterList(event){\r\n        console.log('MONSTER CARD FILTER', event.target.value);\r\n        let currList = this.props.allBosses;\r\n        let newList = [];\r\n        for(let item of currList){\r\n            newList.push(item.name);\r\n        }\r\n        let displayList = [];\r\n        for(let item of newList){\r\n            if(item.includes(event.target.value.toLowerCase())){\r\n                displayList.push(item);\r\n            }\r\n        }\r\n        await this.setState({displayItems: displayList});\r\n    }\r\n\r\n    render(){\r\n        let firstRow = ['hitpoints', 'defence_level', 'magic_level'];\r\n        let secondRow = ['defence_stab', 'defence_slash', 'defence_crush'];\r\n        let thirdRow = ['defence_magic', 'defence_ranged'];\r\n        return(\r\n            <div className=\"card monster-card\">\r\n                <div className=\"row\">      \r\n                    <button type=\"button\" className=\"boss-select btn-default\" data-toggle=\"dropdown\">{this.props.selectedBoss.name}</button>\r\n                    <ul className=\"dropdown-menu scrollable-menu\" role=\"menu\">\r\n                        <input type=\"search\" onChange={this.filterList} className=\"search-bar\"></input>  \r\n                            {this.state.displayItems.map((item, index) =>{\r\n                                return(<li onClick={this.handleChange} key={index}>{item}</li>)\r\n                            }) }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"boss-img-card\">\r\n                        <img className=\"boss-img\" src={image} alt=\"\"></img>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row stats-row\">\r\n                        <div className=\"card form-card\">\r\n                            <div className=\"row\">\r\n                                {firstRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                {secondRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>                            \r\n                            <div className=\"row\">\r\n                                {thirdRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allBosses: state.allBosses,\r\n        selectedBoss: state.selectedBoss\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(MonsterInfoCard)\r\n",["68","69"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/index.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/reportWebVitals.js",[],["70","71"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DropDownList.js",["72"],"import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\n\r\nclass DropDownList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            equipped: '',\r\n            icon: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async handleChange(event){\r\n        let itemList = [];\r\n        switch(this.props.type){\r\n            case 'weapon' : itemList = this.props.allWeapons; break;\r\n            case 'helm' : itemList = this.props.allHelms; break;\r\n            case 'cape' : itemList = this.props.allCapes; break;\r\n            case 'neck' : itemList = this.props.allNecks; break;\r\n            case 'ammo' : itemList = this.props.allAmmo; break;\r\n            case 'body' : itemList = this.props.allBodies; break;\r\n            case 'offhand' : itemList = this.props.allShields; break;\r\n            case 'legs' : itemList = this.props.allLegs; break;\r\n            case 'hand' : itemList = this.props.allHands; break;\r\n            case 'feet' : itemList = this.props.allFeet; break;\r\n            case 'ring' : itemList = this.props.allRings; break;\r\n            default: itemList = [];\r\n        }\r\n        const itemID = itemList.find(item => item.name === event.target.innerText).id;\r\n    \r\n        await this.setState({equipped: event.target.innerText});\r\n        console.log('NEW ITEM SELECTED:', this.state.equipped, itemID);\r\n        await fetch(`https://api.osrsbox.com/equipment/${itemID}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                const {equipment, icon} = json;\r\n                let dispatchType = this.props.type.toUpperCase();\r\n                console.log('DISPATCH: ', dispatchType);\r\n                this.setState({icon: icon});\r\n                this.props.dispatch({\r\n                    type: `CHANGE_${dispatchType}`,\r\n                    payload: {name: this.state.equipped, icon: icon}\r\n                })\r\n            }\r\n        ) \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            this.props.items.map((item, index) =>{\r\n                return(<li onClick={this.handleChange} key={index}>{item}</li>)\r\n            }) \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        allWeapons: state.allWeapons,\r\n        allAmmo: state.allAmmo,\r\n        allBodies: state.allBodies,\r\n        allCapes: state.allCapes,\r\n        allNecks: state.allNecks,\r\n        allShields: state.allShields,\r\n        allLegs: state.allLegs,\r\n        allHands: state.allHands,\r\n        allFeet: state.allFeet,\r\n        allRings: state.allRings,\r\n        allHelms: state.allHelms,\r\n        equippedHead: state.equippedHead,\r\n        equippedCape: state.equippedCape,\r\n        equippedNeck: state.equippedNeck,\r\n        equippedAmmo: state.equippedAmmo,\r\n        equippedWeapon: state.equippedWeapon,\r\n        equippedOffhand: state.equippedOffhand,\r\n        equippedLegs: state.equippedLegs,\r\n        equippedHands: state.equippedHands,\r\n        equippedFeet: state.equippedFeet,\r\n        equippedRing: state.equippedRing \r\n    }\r\n  }\r\n\r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(DropDownList)","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/SingleSlot.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipSlotCard.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterSkillSlot.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerSkillSlot.js",[],{"ruleId":"73","severity":1,"message":"74","line":146,"column":7,"nodeType":"75","messageId":"76","endLine":149,"endColumn":28},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":23},{"ruleId":"77","replacedBy":"85"},{"ruleId":"79","replacedBy":"86"},{"ruleId":"81","severity":1,"message":"87","line":21,"column":13,"nodeType":"83","messageId":"84","endLine":21,"endColumn":14},{"ruleId":"77","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},{"ruleId":"77","replacedBy":"90"},{"ruleId":"79","replacedBy":"91"},{"ruleId":"81","severity":1,"message":"92","line":37,"column":24,"nodeType":"83","messageId":"84","endLine":37,"endColumn":33},"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'MonsterInfoCard' is defined but never used.","Identifier","unusedVar",["93"],["94"],"'a' is assigned a value but never used.",["93"],["94"],["93"],["94"],"'equipment' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]