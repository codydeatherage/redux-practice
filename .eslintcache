[{"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/Store.js":"1","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipmentDropDown.js":"2","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/App.js":"3","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerInfoCard.js":"4","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterInfoCard.js":"5","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel.js":"6","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/index.js":"7","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/reportWebVitals.js":"8","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DropDownList.js":"9","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/SingleSlot.js":"10","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipSlotCard.js":"11","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterSkillSlot.js":"12","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerSkillSlot.js":"13","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PrayerSelect.js":"14","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PrayerSelectItem.js":"15","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel/AttackStyles.js":"16","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel/AttackStyleItem.js":"17"},{"size":6577,"mtime":1614834099448,"results":"18","hashOfConfig":"19"},{"size":811,"mtime":1616128566841,"results":"20","hashOfConfig":"19"},{"size":508,"mtime":1614830828224,"results":"21","hashOfConfig":"19"},{"size":7509,"mtime":1614830830972,"results":"22","hashOfConfig":"19"},{"size":6179,"mtime":1607825585674,"results":"23","hashOfConfig":"24"},{"size":17115,"mtime":1615857792775,"results":"25","hashOfConfig":"19"},{"size":822,"mtime":1616479582286,"results":"26","hashOfConfig":"19"},{"size":362,"mtime":1614830831279,"results":"27","hashOfConfig":"19"},{"size":1530,"mtime":1616304169285,"results":"28","hashOfConfig":"19"},{"size":752,"mtime":1616304253320,"results":"29","hashOfConfig":"19"},{"size":2520,"mtime":1614830830926,"results":"30","hashOfConfig":"19"},{"size":618,"mtime":1607751077394,"results":"31","hashOfConfig":"24"},{"size":1936,"mtime":1615860782767,"results":"32","hashOfConfig":"19"},{"size":683,"mtime":1615859842866,"results":"33","hashOfConfig":"19"},{"size":1572,"mtime":1615859626600,"results":"34","hashOfConfig":"19"},{"size":2081,"mtime":1616304365363,"results":"35","hashOfConfig":"19"},{"size":688,"mtime":1616304426280,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1jhv7jo",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"k2xskb",{"filePath":"50","messages":"51","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"39"},"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/Store.js",[],["79","80"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipmentDropDown.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/App.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerInfoCard.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterInfoCard.js",["81"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport image from './../zulrah.png'\r\nimport MonsterSkillSlot from './MonsterSkillSlot'\r\nimport './../stylesheets/MonsterInfo.css'\r\n\r\nclass MonsterInfoCard extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            displayItems: [],\r\n            selected: ''\r\n        }\r\n        this.filterList = this.filterList.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        let pageNumber = 1;\r\n        let eMax_Pages = 57;\r\n        let a = new Date();\r\n        console.log('Beginning fetch....');\r\n        for(let i = pageNumber; i <= eMax_Pages; i++){\r\n        await fetch(`https://api.osrsbox.com/monsters?max_results=50&&page=${i}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                for (let j = 0; j < json._items.length; j++) {\r\n                    const {category, name, id} = json._items[j];\r\n                    if(category.includes('boss')){\r\n                        this.props.dispatch({\r\n                            type: 'ADD_BOSS',\r\n                            payload: {name: name.toLowerCase(), id: id}\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n    async handleChange(event){\r\n        let itemList = this.props.allBosses;\r\n        const itemID = itemList.find(item => item.name === event.target.innerText).id;\r\n        await this.setState({selected: event.target.innerText});\r\n        console.log('NEW ITEM SELECTED:', this.state.selected, itemID);\r\n        await fetch(`https://api.osrsbox.com/monsters/${itemID}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                const {\r\n                    name,\r\n                    hitpoints, \r\n                    combat_level, \r\n                    id,        \r\n                    defence_level, \r\n                    magic_level, \r\n                    defence_stab,           \r\n                    defence_slash, \r\n                    defence_crush, \r\n                    defence_magic,              \r\n                    defence_ranged\r\n                } = json;\r\n                this.props.dispatch({\r\n                    type: `SELECTED_BOSS`,\r\n                    payload: {                    \r\n                        name: name,\r\n                        hitpoints: hitpoints,  \r\n                        combat_level: combat_level, \r\n                        id: id,     \r\n                        defence_level: defence_level, \r\n                        magic_level: magic_level, \r\n                        defence_stab: defence_stab,           \r\n                        defence_slash: defence_slash, \r\n                        defence_crush: defence_crush, \r\n                        defence_magic: defence_magic,              \r\n                        defence_ranged: defence_ranged\r\n                    }\r\n                })\r\n            }\r\n        ) \r\n    }\r\n    async filterList(event){\r\n        console.log('MONSTER CARD FILTER', event.target.value);\r\n        let currList = this.props.allBosses;\r\n        let newList = [];\r\n        for(let item of currList){\r\n            newList.push(item.name);\r\n        }\r\n        let displayList = [];\r\n        for(let item of newList){\r\n            if(item.includes(event.target.value.toLowerCase())){\r\n                displayList.push(item);\r\n            }\r\n        }\r\n        await this.setState({displayItems: displayList});\r\n    }\r\n\r\n    render(){\r\n        let firstRow = ['hitpoints', 'defence_level', 'magic_level'];\r\n        let secondRow = ['defence_stab', 'defence_slash', 'defence_crush'];\r\n        let thirdRow = ['defence_magic', 'defence_ranged'];\r\n        return(\r\n            <div className=\"card monster-card\">\r\n                <div className=\"row\">      \r\n                    <button type=\"button\" className=\"boss-select btn-default\" data-toggle=\"dropdown\">{this.props.selectedBoss.name}</button>\r\n                    <ul className=\"dropdown-menu scrollable-menu\" role=\"menu\">\r\n                        <input type=\"search\" onChange={this.filterList} className=\"search-bar\"></input>  \r\n                            {this.state.displayItems.map((item, index) =>{\r\n                                return(<li onClick={this.handleChange} key={index}>{item}</li>)\r\n                            }) }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"boss-img-card\">\r\n                        <img className=\"boss-img\" src={image} alt=\"\"></img>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row stats-row\">\r\n                        <div className=\"card form-card\">\r\n                            <div className=\"row\">\r\n                                {firstRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                {secondRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>                            \r\n                            <div className=\"row\">\r\n                                {thirdRow.map((stat, index)=>{\r\n                                    return(<MonsterSkillSlot stat={stat} key={index}></MonsterSkillSlot>)\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allBosses: state.allBosses,\r\n        selectedBoss: state.selectedBoss\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      dispatch\r\n    }\r\n  }\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(MonsterInfoCard)\r\n",["82","83"],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel.js",["84","85","86","87","88","89","90","91","92","93","94","95","96"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PlayerSkillSlot from './PlayerSkillSlot'\r\nimport './../stylesheets/PlayerInfo.css'\r\nimport AttackStyles from './DataPanel/AttackStyles'\r\nimport PrayerSelect from './PrayerSelect'\r\n\r\nclass DataPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { level, potion, prayer, style, other } = this.props.bonuses;\r\n    }\r\n\r\n    getPrayersToDisplay = () => {\r\n        const prayers = [//len = 16\r\n            { name: \"Clarity of Thought\", boost: 1.05, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/e/e1/Clarity_of_Thought.png?8d584' },\r\n            { name: \"Improved Reflexes\", boost: 1.10, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/7/7e/Improved_Reflexes.png?e38b5' },\r\n            { name: \"Incredible Reflexes\", boost: 1.15, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/8/85/Incredible_Reflexes.png?ecf9c' },\r\n            { name: \"Burst of Strength\", boosts: 1.05, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/7/7b/Burst_of_Strength.png?18c47' },\r\n            { name: \"Superhuman Strength\", boost: 1.10, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/0/08/Superhuman_Strength.png?d2621' },\r\n            { name: \"Ultimate Strength\", boost: 1.15, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/3/3d/Ultimate_Strength.png?510a8' },\r\n            { name: \"Sharp Eye\", boost: 1.05, type: 'range', icon: 'https://oldschool.runescape.wiki/images/a/a3/Sharp_Eye.png?18c47' },\r\n            { name: \"Hawk Eye\", boost: 1.10, type: 'range', icon: 'https://oldschool.runescape.wiki/images/8/8b/Hawk_Eye.png?54ee9' },\r\n            { name: \"Eagle Eye\", boost: 1.15, type: 'range', icon: 'https://oldschool.runescape.wiki/images/d/d5/Eagle_Eye.png?4a200' },\r\n            { name: \"Mystic Will\", boost: 1.05, type: 'magic', icon: 'https://oldschool.runescape.wiki/images/2/23/Mystic_Will.png?20461' },\r\n            { name: \"Mystic Lore\", boost: 1.10, type: 'magic', icon: 'https://oldschool.runescape.wiki/images/d/d1/Mystic_Lore.png?097d2' },\r\n            { name: \"Mystic Might\", boost: 1.15, type: 'magic', icon: 'https://oldschool.runescape.wiki/images/0/03/Mystic_Might.png?b0218' },\r\n            { name: \"Chivalry\", atk_boost: 1.15, str_boost: 1.18, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/1/16/Chivalry.png?58bc5' },\r\n            { name: \"Piety\", atk_boost: 1.20, str_boost: 1.23, type: 'melee', icon: 'https://oldschool.runescape.wiki/images/a/a2/Piety.png?58239' },\r\n            { name: \"Rigour\", range_atk_boost: 1.20, range_str_boost: 1.23, type: 'range', icon: 'https://oldschool.runescape.wiki/images/5/5b/Rigour.png?159e1' },\r\n            { name: \"Augury\", boost: 1.25, type: 'magic', icon: 'https://oldschool.runescape.wiki/images/9/93/Augury.png?f234e' }\r\n        ];\r\n        let prayersToDisplay = [];\r\n        let attackType = '';\r\n        switch (this.props.equippedWeapon.weapon_type) {\r\n            case '2h_sword':\r\n            case 'axe':\r\n            case 'bladed_stave':\r\n            case 'blunt':\r\n            case 'claw':\r\n            case 'pickaxe':\r\n            case 'polearm':\r\n            case 'polestave':\r\n            case 'scythe':\r\n            case 'slashing_sword':\r\n            case 'spear':\r\n            case 'spiked_weapon':\r\n            case 'stave':\r\n            case 'unarmed':\r\n            case 'whip': attackType = 'melee'; break;\r\n            case 'bow':\r\n            case 'crossbow':\r\n            case 'thrown': attackType = 'range'; break;\r\n            case 'trident': attackType = 'magic'; break;\r\n        }\r\n        for (let prayer of prayers) {\r\n            if (prayer.type === attackType) {\r\n                prayersToDisplay.push(prayer);\r\n            }\r\n        }\r\n        return prayersToDisplay;\r\n    }\r\n\r\n    render() {\r\n        const { level, potion, prayer, style, other } = this.props.bonuses;\r\n        /*https://oldschool.runescape.wiki/w/Damage_per_second/Melee#Step_two:_Calculate_the_maximum_hit*/\r\n        /*From wiki\r\n            1. Effective strength level\r\n            2. Multiply by (Equipment Melee Strength + 64)\r\n            3. Add 320\r\n            4. Divide by 640\r\n            5. Round down to nearest integer\r\n            6. Multiply by gear bonus\r\n            7. Round down to nearest integer\r\n        */\r\n        let {\r\n            equippedBody, equippedHead, equippedCape, equippedNeck,\r\n            equippedAmmo, equippedWeapon, equippedOffhand, equippedLegs,\r\n            equippedHands, equippedFeet, equippedRing\r\n        } = this.props;\r\n        let allEquipped = [equippedBody, equippedHead, equippedCape,\r\n            equippedNeck, equippedAmmo, equippedWeapon,\r\n            equippedOffhand, equippedLegs, equippedHands,\r\n            equippedFeet, equippedRing\r\n        ];\r\n\r\n        let equipment_str = 0;\r\n        let equipment_atk = { slash: 0, stab: 0, crush: 0 };\r\n        for (let slot of allEquipped) {\r\n            if (slot !== undefined) {\r\n                //console.log(slot.stats);\r\n                if (slot.stats !== \"\") {\r\n                    equipment_str += slot.stats.melee_strength;\r\n                    equipment_atk.slash += slot.stats.attack_slash;\r\n                    equipment_atk.stab += slot.stats.attack_stab;\r\n                    equipment_atk.crush += slot.stats.attack_crush;\r\n                }\r\n            }\r\n        }\r\n        let atkPrayerBoost = 1;\r\n        let strPrayerBoost = 1;\r\n        let magicPrayerBoost = 1;\r\n        let rangePrayerBoost = 1;\r\n        if (this.props.activePrayers.atk) {\r\n            if (this.props.activePrayers.atk.name === \"Chivalry\" || this.props.activePrayers.atk.name === \"Piety\") {\r\n                atkPrayerBoost = this.props.activePrayers.atk.atk_boost;\r\n                strPrayerBoost = this.props.activePrayers.atk.str_boost;\r\n            }\r\n            else {\r\n                atkPrayerBoost = this.props.activePrayers.atk.boost;\r\n            }\r\n        }\r\n        if (this.props.activePrayers.str) {\r\n            if (this.props.activePrayers.str.name === \"Chivalry\" || this.props.activePrayers.str.name === \"Piety\") {\r\n                atkPrayerBoost = this.props.activePrayers.str.atk_boost;\r\n                strPrayerBoost = this.props.activePrayers.str.str_boost;\r\n            }\r\n            else {\r\n                strPrayerBoost = this.props.activePrayers.str.boost;\r\n            }\r\n        }\r\n\r\n        let effective_strength = Math.floor(((this.props.playerStats.str * strPrayerBoost) + /*style*/3));\r\n        // console.log('Effective Strength', effective_strength);\r\n        let maxHit = Math.floor(1.3 + (effective_strength / 10) + (equipment_str / 80) + Math.floor((effective_strength * equipment_str) / 640));\r\n        let effective_attack = Math.floor(((this.props.playerStats.atk * atkPrayerBoost) + 1));\r\n        //console.log('Effective Attack ', effective_attack);\r\n        //need to modify to factor in selected atk style\r\n        let attackRoll = effective_attack * (equipment_atk.slash + 64);\r\n        let defenceRoll = Math.floor((this.props.selectedBoss.defence_level + 9) * (this.props.selectedBoss.defence_slash + 64));\r\n        let hitChance = 0;\r\n        if (attackRoll > defenceRoll) {\r\n            hitChance = (1 - ((defenceRoll + 2) / (2 * attackRoll + 1)));\r\n        } else {\r\n            hitChance = (attackRoll / (2 * defenceRoll + 1));\r\n        }\r\n\r\n        let avgHit = ((maxHit * hitChance) / 2).toFixed(2);\r\n        hitChance = (hitChance * 100).toFixed(2);\r\n        let dps = (avgHit / 2.4).toFixed(2);\r\n\r\n        let styles = [];\r\n        for (let style of this.props.equippedWeapon.stances) {\r\n            styles.push(style.combat_style);\r\n        }\r\n        console.log('Styles', styles, this.props.equippedWeapon.weapon_type);\r\n\r\n        let weapState = [];\r\n        for (let i = 0; i < styles.length; i++) {\r\n            weapState.push({ style: styles[i], selected: false })\r\n        }\r\n        const { weapon_type } = this.props.equippedWeapon;\r\n        let styleImages = [];\r\n        for (let state of weapState) {\r\n            let path = `/assets/attackStyles/${weapon_type}/${weapon_type}_${state.style}_crop.png`;\r\n            styleImages.push({ style: state.style, img: path, selected: false, weaponType: this.props.equippedWeapon.weapon_type });\r\n        }\r\n        if (styleImages.length < 4) {\r\n            styleImages.push({ style: '', img: '', selected: false, weaponType: weapon_type })\r\n        }\r\n\r\n        let prayersToDisplay = this.getPrayersToDisplay();\r\n        return (\r\n            <div className=\"card panel-card\">\r\n                <div className=\"input-container\">\r\n                    <div className=\"skills-container\">\r\n                        <div className=\"row\">\r\n                            <PlayerSkillSlot slot={'atk_level'} value={this.props.playerStats.atk + this.props.bonuses.potion}></PlayerSkillSlot>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <PlayerSkillSlot slot=\"str_level\" value={this.props.playerStats.str + this.props.bonuses.potion}></PlayerSkillSlot>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <PlayerSkillSlot slot=\"magic_level\" value={this.props.playerStats.magic + this.props.bonuses.potion}></PlayerSkillSlot>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <PlayerSkillSlot slot=\"ranged_level\" value={this.props.playerStats.range + this.props.bonuses.potion}></PlayerSkillSlot>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"options-container\">\r\n                        <div className=\"row style-select-row\">\r\n                            <div className=\"styles-container attack-styles\">\r\n                                <div className=\"test-options style-select\">\r\n                                    <AttackStyles data={styleImages} equipped={this.props.equippedWeapon} weaponType={this.props.equippedWeapon.weapon_type} ></AttackStyles>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"test-options\">\r\n                                <div className=\"options-label\">\r\n                                    Stat-Reducing Specs\r\n                                </div>\r\n                                <div className=\"test-box \">\r\n                                    <div className=\"spec-input-container \">\r\n                                        <input className=\"spec-input\" type=\"number\" step=\"1\" min=\"0\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/e/ea/Dragon_warhammer.png?27308\" alt=\"\"></img>\r\n                                    </div>\r\n                                    <div className=\"spec-input-container\">\r\n                                        <input className=\"spec-input\" type=\"text\" ></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/6/6c/Bandos_godsword.png?0f871\" alt=\"\"></img>\r\n                                    </div>\r\n                                    <div className=\"spec-input-container\">\r\n                                        <input className=\"spec-input\" type=\"number\" step=\"1\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/1/16/Arclight.png?3d34e\" alt=\"\"></img>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"test-options\">\r\n                                <div className=\"options-label\">\r\n                                    Potion Boosts\r\n                                </div>\r\n                                <div className=\"test-box\">\r\n                                    <div className=\"container\">\r\n                                        <input class=\"form-check-input\" type=\"checkbox\" name=\"exampleRadios\" id=\"scb-image\" value=\"option2\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/6/6f/Ranging_potion%284%29.png?71375\" alt=\"\"></img>\r\n                                    </div>\r\n                                    <div className=\"container\">\r\n                                        <input class=\"form-check-input\" type=\"checkbox\" name=\"exampleRadios\" id=\"scb-image\" value=\"option2\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/8/82/Super_combat_potion%284%29.png?dc66c\" alt=\"\"></img>\r\n                                    </div>\r\n                                    <div className=\"container\">\r\n                                        <input class=\"form-check-input\" type=\"checkbox\" name=\"exampleRadios\" id=\"scb-image\" value=\"option2\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/e/e5/Overload_%28%2B%29%284%29.png?6b1dd\" alt=\"\"></img>\r\n                                    </div>\r\n                                    <div className=\"container\">\r\n                                        <input class=\"form-check-input\" type=\"checkbox\" name=\"exampleRadios\" id=\"scb-image\" value=\"option2\"></input>\r\n                                        <img className=\"checkbox-image\" src=\"https://oldschool.runescape.wiki/images/f/fe/Imbued_heart.png?b33a3\" alt=\"\"></img>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"test-options\">\r\n                                <div className=\"options-label\">\r\n                                    Prayers\r\n                                </div>\r\n                                <PrayerSelect prayersToDisplay={prayersToDisplay}></PrayerSelect>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <h1>Attack Bonuses</h1>\r\n                </div>\r\n                <div className=\"atk-bonus-container\">\r\n                    <div className=\"equip-bonus-container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">{`STAB: ${equipment_atk.stab}`}</div>\r\n                            <div className=\"atk-bonus\">{`SLASH: ${equipment_atk.slash}`}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">{`CRUSH: ${equipment_atk.crush}`}</div>\r\n                            <div className=\"atk-bonus\">{`MELEE_STR: ${equipment_str}`}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">MAGIC: </div>\r\n                            <div className=\"atk-bonus\">MAGIC_DMG: </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">RANGED: </div>\r\n                            <div className=\"atk-bonus\">RANGED_STR: </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"data-output\">\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">{`MAX HIT: ${maxHit}`}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">{`ACCURACY: ${hitChance}`}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"atk-bonus\">{`DPS: ${dps}`} </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        equippedBody: state.equippedBody,\r\n        equippedHead: state.equippedHead,\r\n        equippedCape: state.equippedCape,\r\n        equippedNeck: state.equippedNeck,\r\n        equippedAmmo: state.equippedAmmo,\r\n        equippedWeapon: state.equippedWeapon,\r\n        equippedOffhand: state.equippedOffhand,\r\n        equippedLegs: state.equippedLegs,\r\n        equippedHands: state.equippedHands,\r\n        equippedFeet: state.equippedFeet,\r\n        equippedRing: state.equippedRing,\r\n        selectedBoss: state.selectedBoss,\r\n        playerStats: state.playerStats,\r\n        activePrayers: state.activePrayers,\r\n        bonuses: state.bonuses\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(DataPanel)\r\n","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/index.js",["97"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './Store';\nwindow.store = store;\ndocument.body.style.backgroundColor = '#2c2f33';\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\n/* const images = importAll(require.context('./assets/attackStyles/2h_sword', false, /\\.(png|jpe?g|svg)$/)); */\nReactDOM.render(\n  <Provider store={store}>\n    <App  /* images={images} *//>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/reportWebVitals.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DropDownList.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/SingleSlot.js",["98","99"],"import React, { useState } from 'react'\r\nimport DropDownList from './DropDownList'\r\n\r\nconst SingleSlot = props => {\r\n    const [currList, setDisplayList] = useState({ items: props.listAll });\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button equip-slot\" className=\"btn btn-default\" data-toggle=\"dropdown\"></button>\r\n            {props.icon ? <img className=\"test\" src={`data:image/png;base64,${props.icon}`} alt=\"\"></img> : null}\r\n            <ul className=\"dropdown-menu scrollable-menu\" role=\"menu\">\r\n                <DropDownList\r\n                    listType= {props.listType}\r\n                    items={props.listAll} >\r\n                </DropDownList>  \r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleSlot","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/EquipSlotCard.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/MonsterSkillSlot.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PlayerSkillSlot.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PrayerSelect.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/PrayerSelectItem.js",["100"],"import { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst PrayerSelectItem = (props) => {\r\n    const activePrayers = useSelector(state => state.activePrayers);\r\n    const dispatch = useDispatch();\r\n\r\n    const updatePrayers = () => {\r\n        let payload = activePrayers;\r\n        const { name } = props;\r\n        switch (name) {\r\n            case 'Clarity of Thought':\r\n            case 'Improved Reflexes':\r\n            case 'Incredible Reflexes': payload = { atk: name, str: payload.str, range: '', magic: '' };\r\n                break;\r\n            case 'Burst of Strength':\r\n            case 'Superhuman Strength':\r\n            case 'Ultimate Strength': payload = { atk: payload.atk, str: name, range: '', magic: '' };\r\n                break;\r\n            case 'Sharp Eye':\r\n            case 'Hawk Eye':\r\n            case 'Eagle Eye':\r\n            case 'Rigour': payload = { atk: '', str: '', range: name, magic: '' };\r\n                break;\r\n            case 'Mystic Will':\r\n            case 'Mystic Lore':\r\n            case 'Mystic Might':\r\n            case 'Augury': payload = { atk: '', str: '', range: '', magic: name };\r\n                break;\r\n            case 'Chivalry':\r\n            case 'Piety': payload = { atk: name, str: name, range: '', magic: '' };\r\n                break;\r\n        }\r\n        dispatch({\r\n            type: 'UPDATE_PRAYERS',\r\n            payload: payload\r\n        })\r\n    }\r\n\r\n    return (\r\n        <img onClick={updatePrayers} className=\"prayer-img\" src={props.icon} alt=\"\"></img>\r\n    )\r\n}\r\n\r\nexport default PrayerSelectItem\r\n","/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel/AttackStyles.js",[],"/mnt/c/Users/Deatherage/Documents/JSBootCamp/redux-practice/src/components/DataPanel/AttackStyleItem.js",["101"],"import React, { useState } from 'react'\r\n\r\nconst AttackStyleItem = (props) => {\r\n    \r\n    const handleSelect = () => {\r\n        if(props.data.selected){\r\n            props.onSelectStyle(parseInt(props.id));\r\n        }\r\n        else{\r\n            props.onSelectStyle(parseInt(props.id));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.data.selected ?\r\n                <img onClick={handleSelect} src={props.data.img} className=\"attack-style-img mr-0.5\" alt=\"\"></img>\r\n            :\r\n                <img onClick={handleSelect} src={props.data.img} className=\"attack-style-img mr-0.5\" alt=\"\"></img>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AttackStyleItem",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":21,"column":13,"nodeType":"108","messageId":"109","endLine":21,"endColumn":14},{"ruleId":"102","replacedBy":"110"},{"ruleId":"104","replacedBy":"111"},{"ruleId":"106","severity":1,"message":"112","line":11,"column":17,"nodeType":"108","messageId":"109","endLine":11,"endColumn":22},{"ruleId":"106","severity":1,"message":"113","line":11,"column":24,"nodeType":"108","messageId":"109","endLine":11,"endColumn":30},{"ruleId":"106","severity":1,"message":"114","line":11,"column":32,"nodeType":"108","messageId":"109","endLine":11,"endColumn":38},{"ruleId":"106","severity":1,"message":"115","line":11,"column":40,"nodeType":"108","messageId":"109","endLine":11,"endColumn":45},{"ruleId":"106","severity":1,"message":"116","line":11,"column":47,"nodeType":"108","messageId":"109","endLine":11,"endColumn":52},{"ruleId":"117","severity":1,"message":"118","line":35,"column":9,"nodeType":"119","messageId":"120","endLine":55,"endColumn":10},{"ruleId":"106","severity":1,"message":"112","line":65,"column":17,"nodeType":"108","messageId":"109","endLine":65,"endColumn":22},{"ruleId":"106","severity":1,"message":"113","line":65,"column":24,"nodeType":"108","messageId":"109","endLine":65,"endColumn":30},{"ruleId":"106","severity":1,"message":"114","line":65,"column":32,"nodeType":"108","messageId":"109","endLine":65,"endColumn":38},{"ruleId":"106","severity":1,"message":"115","line":65,"column":40,"nodeType":"108","messageId":"109","endLine":65,"endColumn":45},{"ruleId":"106","severity":1,"message":"116","line":65,"column":47,"nodeType":"108","messageId":"109","endLine":65,"endColumn":52},{"ruleId":"106","severity":1,"message":"121","line":102,"column":13,"nodeType":"108","messageId":"109","endLine":102,"endColumn":29},{"ruleId":"106","severity":1,"message":"122","line":103,"column":13,"nodeType":"108","messageId":"109","endLine":103,"endColumn":29},{"ruleId":"106","severity":1,"message":"123","line":10,"column":10,"nodeType":"108","messageId":"109","endLine":10,"endColumn":19},{"ruleId":"106","severity":1,"message":"124","line":5,"column":12,"nodeType":"108","messageId":"109","endLine":5,"endColumn":20},{"ruleId":"106","severity":1,"message":"125","line":5,"column":22,"nodeType":"108","messageId":"109","endLine":5,"endColumn":36},{"ruleId":"117","severity":1,"message":"118","line":10,"column":9,"nodeType":"119","messageId":"120","endLine":32,"endColumn":10},{"ruleId":"106","severity":1,"message":"126","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":25},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'a' is assigned a value but never used.","Identifier","unusedVar",["127"],["128"],"'level' is assigned a value but never used.","'potion' is assigned a value but never used.","'prayer' is assigned a value but never used.","'style' is assigned a value but never used.","'other' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'magicPrayerBoost' is assigned a value but never used.","'rangePrayerBoost' is assigned a value but never used.","'importAll' is defined but never used.","'currList' is assigned a value but never used.","'setDisplayList' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]